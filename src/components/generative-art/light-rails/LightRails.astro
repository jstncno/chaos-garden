---

---

<div id="art-container"></div>

<style>
  #art-container {
    height: 100%;
    width: 100%;
  }
</style>

<script>
  import P5 from "p5";
  import {
    HSB_COLOR_MAX,
    DEFAULT_TILE_SIZE as TILE_SIZE,
  } from "@lib/generative-art/light-rails/constants";
  import { Edge, LightRailTile } from "@lib/generative-art/light-rails/tile";
  import { WaveFunctionCollapseGridGenerator } from "@lib/generative-art/light-rails/wave-function-collapse";
  import { LightPathGenerator } from "@lib/generative-art/light-rails/light-path";

  const sketch = (p5: P5) => {
    const container = document.getElementById("art-container");
    if (!container) return;

    const { offsetWidth, offsetHeight } = container;
    let numCols: number;
    let numRows: number;
    let pathGen: LightPathGenerator;
    let grid: Array<Array<LightRailTile>> = [];

    p5.setup = () => {
      const width = Math.floor(offsetWidth / TILE_SIZE) * TILE_SIZE;
      const height = Math.floor(offsetHeight / TILE_SIZE) * TILE_SIZE;

      // Creating and positioning the canvas
      const canvas = p5.createCanvas(offsetWidth, offsetHeight);
      canvas.parent(container);

      numCols = Math.floor(width / TILE_SIZE);
      numRows = Math.floor(height / TILE_SIZE);

      // Configuring the canvas
      p5.background("#283747");

      p5.colorMode(p5.HSB, HSB_COLOR_MAX);

      const model = new WaveFunctionCollapseGridGenerator(
        numCols,
        numRows,
        TILE_SIZE,
      );
      model.initialize();
      model.collapse(p5);

      // Initialize grid
      grid = [];
      for (let row = 0; row < model.rows; row++) {
        grid.push([]);
        for (let col = 0; col < model.cols; col++) {
          const data = model.grid[row][col];
          const tile = LightRailTile.fromTile(data);
          const color = [
            p5.random(0, HSB_COLOR_MAX), // Hue
            p5.random(0, HSB_COLOR_MAX), // Saturation
            p5.random(HSB_COLOR_MAX / 2, HSB_COLOR_MAX), // Brightness
          ];
          tile.setColor(color);
          grid[row].push(tile);
        }
      }

      pathGen = new LightPathGenerator(grid);

      const p = pathGen.generate(p5);
      console.log(p?.path);
    };

    p5.draw = () => {
      if (!numCols || !numRows || !grid.length) return;

      for (let row = 0; row < numRows; row++) {
        for (let col = 0; col < numCols; col++) {
          const tile = grid[row][col];
          tile.draw(p5);
        }
      }
    };
  };

  document.addEventListener("astro:page-load", () => new P5(sketch));

  document.addEventListener("astro:before-swap", () => {
    const container = document.getElementById("art-container");
    container?.remove();
  });
</script>
