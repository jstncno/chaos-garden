---
interface Props {
  showGrid?: string;
}

const { showGrid } = Astro.props;
---

<light-rails id="light-rails">
  <div id="art-container" data-show-grid={showGrid}></div>
</light-rails>

<style>
  #art-container {
    display: flex;
    height: 100%;
    width: 100%;
  }
  #art-container canvas {
    margin: auto;
  }
</style>

<script>
  import P5 from "p5";
  import {
    HSB_COLOR_MAX,
    DEFAULT_TILE_SIZE as TILE_SIZE,
    FRAMES_BETWEEN_LIGHT_PATHS,
    MAX_LIGHT_PATHS,
    MAX_SPEED_FACTOR,
  } from "@lib/generative-art/light-rails/constants";
  import { LightRailTile } from "@lib/generative-art/light-rails/tile";
  import { WaveFunctionCollapseGridGenerator } from "@lib/generative-art/light-rails/wave-function-collapse";
  import {
    LightPath,
    LightPathGenerator,
  } from "@lib/generative-art/light-rails/light-path";

  class LightRails extends HTMLElement {
    private p5: P5 | undefined;
    private root: HTMLElement | null | undefined;
    private model: WaveFunctionCollapseGridGenerator | undefined;
    private pathGen: LightPathGenerator | undefined;
    private numRows = 0;
    private numCols = 0;
    private showGrid = true;
    private grid: Array<Array<LightRailTile>> = [];
    private lightPaths: Array<LightPath> = [];
    private speedFactor = 1;

    connectedCallback() {
      this.root = document.getElementById("art-container");
      if (!this.root) return;
      this.showGrid = this.root.dataset.showGrid !== "false";
    }

    start() {
      this.p5 = new P5(this.sketch.bind(this));
      this.regenerate();
    }

    toggleGrid() {
      this.showGrid = !this.showGrid;
    }

    regenerate() {
      const model = this.model;
      if (!model || !this.p5) return;
      model.initialize();
      model.collapse(this.p5);

      // Initialize grid
      this.grid = [];
      for (let row = 0; row < model.rows; row++) {
        this.grid.push([]);
        for (let col = 0; col < model.cols; col++) {
          const data = model.grid[row][col];
          const tile = LightRailTile.fromTile(data);
          this.grid[row].push(tile);
        }
      }

      this.lightPaths = [];
      this.pathGen = new LightPathGenerator(this.grid);
    }

    setSpeed(speed: number) {
      this.speedFactor = Math.max(0, Math.min(speed, MAX_SPEED_FACTOR));
    }

    private sketch(p5: P5) {
      if (!this.root) return;
      const { offsetWidth, offsetHeight } = this.root;
      let frameCount = 0;

      p5.setup = () => {
        if (!this.root) return;
        const width = Math.floor(offsetWidth / TILE_SIZE) * TILE_SIZE;
        const height = Math.floor(offsetHeight / TILE_SIZE) * TILE_SIZE;

        // Creating and positioning the canvas
        const canvas = p5.createCanvas(width, height);
        canvas.parent(this.root);
        canvas.style("margin: auto");

        this.numCols = Math.floor(width / TILE_SIZE);
        this.numRows = Math.floor(height / TILE_SIZE);

        p5.colorMode(p5.HSB, HSB_COLOR_MAX);

        this.model = new WaveFunctionCollapseGridGenerator(
          this.numCols,
          this.numRows,
          TILE_SIZE,
        );

        this.regenerate();
      };

      p5.draw = () => {
        p5.clear();
        p5.background("#283747");

        if (
          !this.numCols ||
          !this.numRows ||
          !this.grid.length ||
          !this.pathGen
        )
          return;

        for (let row = 0; row < this.numRows; row++) {
          for (let col = 0; col < this.numCols; col++) {
            const tile = this.grid[row][col];
            tile.draw(p5, this.showGrid);
          }
        }

        if (
          this.lightPaths.length < MAX_LIGHT_PATHS &&
          (!this.lightPaths.length || frameCount > FRAMES_BETWEEN_LIGHT_PATHS)
        ) {
          frameCount = 0;
          const lightPath = this.pathGen.generate(p5);
          if (lightPath) {
            this.lightPaths.push(lightPath);
          }
        }

        for (const lightPath of this.lightPaths) {
          lightPath.draw(p5, this.speedFactor);
        }

        this.lightPaths = this.lightPaths.filter((p) => !p.done);

        frameCount++;
      };

      p5.windowResized = () => {
        p5.resizeCanvas(p5.windowWidth, p5.windowHeight);

        this.numCols = Math.floor(p5.windowWidth / TILE_SIZE);
        this.numRows = Math.floor(p5.windowHeight / TILE_SIZE);

        this.model = new WaveFunctionCollapseGridGenerator(
          this.numCols,
          this.numRows,
          TILE_SIZE,
        );
        this.regenerate();
      };
    }
  }

  document.addEventListener("astro:page-load", () => {
    const lightRails = document.getElementById("light-rails") as LightRails;
    lightRails?.start();
  });

  document.addEventListener("astro:before-swap", () => {
    const lightRails = document.getElementById("light-rails");
    lightRails?.remove();
  });

  customElements.define("light-rails", LightRails);
</script>
